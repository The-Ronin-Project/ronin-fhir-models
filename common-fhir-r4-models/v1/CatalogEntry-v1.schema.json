{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "$id": "http://hl7.org/fhir/json-schema/4.0/CatalogEntry-v1.schema.json",
  "type": "object",
  "$ref": "#/definitions/CatalogEntry",
  "definitions": {
    "CatalogEntry": {
      "description": "Catalog entries are wrappers that contextualize items included in a catalog.",
      "allOf": [
        {
          "$ref": "core/resource.schema.json#/definitions/DomainResource"
        }
      ],
      "extends": {
        "$ref": "core/resource.schema.json#/definitions/DomainResource"
      },
      "properties": {
        "resourceType": {
          "description": "This is a CatalogEntry resource",
          "type": "string",
          "const": "CatalogEntry"
        },
        "identifier": {
          "description": "Used in supporting different identifiers for the same product, e.g. manufacturer code and retailer code.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Identifier"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of item - medication, device, service, protocol or other.",
          "$ref": "core/elements.schema.json#/definitions/CodeableConcept"
        },
        "orderable": {
          "description": "Whether the entry represents an orderable item.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_orderable": {
          "description": "Extensions for orderable",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "referencedItem": {
          "description": "The item in a catalog or definition.",
          "$ref": "core/elements.schema.json#/definitions/Reference"
        },
        "additionalIdentifier": {
          "description": "Used in supporting related concepts, e.g. NDC to RxNorm.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Identifier"
          },
          "type": "array"
        },
        "classification": {
          "description": "Classes of devices, or ATC for medication.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "status": {
          "description": "Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.",
          "enum": [
            "draft",
            "active",
            "retired",
            "unknown"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "validityPeriod": {
          "description": "The time period in which this catalog entry is expected to be active.",
          "$ref": "core/elements.schema.json#/definitions/Period"
        },
        "validTo": {
          "description": "The date until which this catalog entry is expected to be active.",
          "$ref": "core/primitives.schema.json#/definitions/dateTime"
        },
        "_validTo": {
          "description": "Extensions for validTo",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "lastUpdated": {
          "description": "Typically date of issue is different from the beginning of the validity. This can be used to see when an item was last updated.",
          "$ref": "core/primitives.schema.json#/definitions/dateTime"
        },
        "_lastUpdated": {
          "description": "Extensions for lastUpdated",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "additionalCharacteristic": {
          "description": "Used for examplefor Out of Formulary, or any specifics.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "additionalClassification": {
          "description": "User for example for ATC classification, or.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "relatedEntry": {
          "description": "Used for example, to point to a substance, or to a device used to administer a medication.",
          "items": {
            "$ref": "#/definitions/CatalogEntry_RelatedEntry"
          },
          "type": "array"
        }
      },
      "unevaluatedProperties": false,
      "required": [
        "resourceType",
        "referencedItem"
      ]
    },
    "CatalogEntry_RelatedEntry": {
      "description": "Catalog entries are wrappers that contextualize items included in a catalog.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "relationtype": {
          "description": "The type of relation to the related item: child, parent, packageContent, containerPackage, usedIn, uses, requires, etc.",
          "enum": [
            "triggers",
            "is-replaced-by"
          ]
        },
        "_relationtype": {
          "description": "Extensions for relationtype",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "item": {
          "description": "The reference to the related item.",
          "$ref": "core/elements.schema.json#/definitions/Reference"
        }
      },
      "additionalProperties": false,
      "required": [
        "item"
      ]
    }
  }
}
