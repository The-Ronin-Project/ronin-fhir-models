{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "$id": "http://hl7.org/fhir/json-schema/4.0/TestReport-v1.schema.json",
  "type": "object",
  "$ref": "#/definitions/TestReport",
  "definitions": {
    "TestReport": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "allOf": [
        {
          "$ref": "core/resource.schema.json#/definitions/DomainResource"
        }
      ],
      "extends": {
        "$ref": "core/resource.schema.json#/definitions/DomainResource"
      },
      "properties": {
        "resourceType": {
          "description": "This is a TestReport resource",
          "type": "string",
          "const": "TestReport"
        },
        "identifier": {
          "description": "Identifier for the TestScript assigned for external purposes outside the context of FHIR.",
          "$ref": "core/elements.schema.json#/definitions/Identifier"
        },
        "name": {
          "description": "A free text natural language name identifying the executed TestScript.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "status": {
          "description": "The current state of this test report.",
          "enum": [
            "completed",
            "in-progress",
            "waiting",
            "stopped",
            "entered-in-error"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "testScript": {
          "description": "Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.",
          "$ref": "core/elements.schema.json#/definitions/Reference"
        },
        "result": {
          "description": "The overall result from the execution of the TestScript.",
          "enum": [
            "pass",
            "fail",
            "pending"
          ]
        },
        "_result": {
          "description": "Extensions for result",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "score": {
          "description": "The final score (percentage of tests passed) resulting from the execution of the TestScript.",
          "$ref": "core/primitives.schema.json#/definitions/decimal"
        },
        "_score": {
          "description": "Extensions for score",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "tester": {
          "description": "Name of the tester producing this report (Organization or individual).",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_tester": {
          "description": "Extensions for tester",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "issued": {
          "description": "When the TestScript was executed and this TestReport was generated.",
          "$ref": "core/primitives.schema.json#/definitions/dateTime"
        },
        "_issued": {
          "description": "Extensions for issued",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "participant": {
          "description": "A participant in the test execution, either the execution engine, a client, or a server.",
          "items": {
            "$ref": "#/definitions/TestReport_Participant"
          },
          "type": "array"
        },
        "setup": {
          "description": "The results of the series of required setup operations before the tests were executed.",
          "$ref": "#/definitions/TestReport_Setup"
        },
        "test": {
          "description": "A test executed from the test script.",
          "items": {
            "$ref": "#/definitions/TestReport_Test"
          },
          "type": "array"
        },
        "teardown": {
          "description": "The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).",
          "$ref": "#/definitions/TestReport_Teardown"
        }
      },
      "unevaluatedProperties": false,
      "required": [
        "testScript",
        "resourceType"
      ]
    },
    "TestReport_Participant": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of participant.",
          "enum": [
            "test-engine",
            "client",
            "server"
          ]
        },
        "_type": {
          "description": "Extensions for type",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "uri": {
          "description": "The uri of the participant. An absolute URL is preferred.",
          "$ref": "core/primitives.schema.json#/definitions/uri"
        },
        "_uri": {
          "description": "Extensions for uri",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "display": {
          "description": "The display name of the participant.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_display": {
          "description": "Extensions for display",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TestReport_Setup": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "action": {
          "description": "Action would contain either an operation or an assertion.",
          "items": {
            "$ref": "#/definitions/TestReport_Action"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "action"
      ]
    },
    "TestReport_Action": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "operation": {
          "description": "The operation performed.",
          "$ref": "#/definitions/TestReport_Operation"
        },
        "assert": {
          "description": "The results of the assertion performed on the previous operations.",
          "$ref": "#/definitions/TestReport_Assert"
        }
      },
      "additionalProperties": false
    },
    "TestReport_Operation": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "result": {
          "description": "The result of this operation.",
          "enum": [
            "pass",
            "skip",
            "fail",
            "warning",
            "error"
          ]
        },
        "_result": {
          "description": "Extensions for result",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "message": {
          "description": "An explanatory message associated with the result.",
          "$ref": "core/primitives.schema.json#/definitions/markdown"
        },
        "_message": {
          "description": "Extensions for message",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "detail": {
          "description": "A link to further details on the result.",
          "$ref": "core/primitives.schema.json#/definitions/uri"
        },
        "_detail": {
          "description": "Extensions for detail",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TestReport_Assert": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "result": {
          "description": "The result of this assertion.",
          "enum": [
            "pass",
            "skip",
            "fail",
            "warning",
            "error"
          ]
        },
        "_result": {
          "description": "Extensions for result",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "message": {
          "description": "An explanatory message associated with the result.",
          "$ref": "core/primitives.schema.json#/definitions/markdown"
        },
        "_message": {
          "description": "Extensions for message",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "detail": {
          "description": "A link to further details on the result.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_detail": {
          "description": "Extensions for detail",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TestReport_Test": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of this test used for tracking/logging purposes by test engines.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "description": {
          "description": "A short description of the test used by test engines for tracking and reporting purposes.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "action": {
          "description": "Action would contain either an operation or an assertion.",
          "items": {
            "$ref": "#/definitions/TestReport_Action1"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "action"
      ]
    },
    "TestReport_Action1": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "operation": {
          "description": "An operation would involve a REST request to a server.",
          "$ref": "#/definitions/TestReport_Operation"
        },
        "assert": {
          "description": "The results of the assertion performed on the previous operations.",
          "$ref": "#/definitions/TestReport_Assert"
        }
      },
      "additionalProperties": false
    },
    "TestReport_Teardown": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "action": {
          "description": "The teardown action will only contain an operation.",
          "items": {
            "$ref": "#/definitions/TestReport_Action2"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "action"
      ]
    },
    "TestReport_Action2": {
      "description": "A summary of information based on the results of executing a TestScript.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "operation": {
          "description": "An operation would involve a REST request to a server.",
          "$ref": "#/definitions/TestReport_Operation"
        }
      },
      "additionalProperties": false,
      "required": [
        "operation"
      ]
    }
  }
}
