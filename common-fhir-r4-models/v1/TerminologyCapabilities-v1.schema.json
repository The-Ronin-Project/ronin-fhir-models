{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "$id": "http://hl7.org/fhir/json-schema/4.0/TerminologyCapabilities-v1.schema.json",
  "type": "object",
  "$ref": "#/definitions/TerminologyCapabilities",
  "definitions": {
    "TerminologyCapabilities": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "allOf": [
        {
          "$ref": "core/resource.schema.json#/definitions/DomainResource"
        }
      ],
      "extends": {
        "$ref": "core/resource.schema.json#/definitions/DomainResource"
      },
      "properties": {
        "resourceType": {
          "description": "This is a TerminologyCapabilities resource",
          "type": "string",
          "const": "TerminologyCapabilities"
        },
        "url": {
          "description": "An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers.",
          "$ref": "core/primitives.schema.json#/definitions/uri"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "version": {
          "description": "The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "name": {
          "description": "A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "title": {
          "description": "A short, descriptive, user-friendly title for the terminology capabilities.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_title": {
          "description": "Extensions for title",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "status": {
          "description": "The status of this terminology capabilities. Enables tracking the life-cycle of the content.",
          "enum": [
            "draft",
            "active",
            "retired",
            "unknown"
          ]
        },
        "_status": {
          "description": "Extensions for status",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "experimental": {
          "description": "A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_experimental": {
          "description": "Extensions for experimental",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "date": {
          "description": "The date  (and optionally time) when the terminology capabilities was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the terminology capabilities changes.",
          "$ref": "core/primitives.schema.json#/definitions/dateTime"
        },
        "_date": {
          "description": "Extensions for date",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "publisher": {
          "description": "The name of the organization or individual that published the terminology capabilities.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_publisher": {
          "description": "Extensions for publisher",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "contact": {
          "description": "Contact details to assist a user in finding and communicating with the publisher.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/ContactDetail"
          },
          "type": "array"
        },
        "description": {
          "description": "A free text natural language description of the terminology capabilities from a consumer\u0027s perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.",
          "$ref": "core/primitives.schema.json#/definitions/markdown"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "useContext": {
          "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/UsageContext"
          },
          "type": "array"
        },
        "jurisdiction": {
          "description": "A legal or geographic region in which the terminology capabilities is intended to be used.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "purpose": {
          "description": "Explanation of why this terminology capabilities is needed and why it has been designed as it has.",
          "$ref": "core/primitives.schema.json#/definitions/markdown"
        },
        "_purpose": {
          "description": "Extensions for purpose",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "copyright": {
          "description": "A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.",
          "$ref": "core/primitives.schema.json#/definitions/markdown"
        },
        "_copyright": {
          "description": "Extensions for copyright",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "kind": {
          "description": "The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).",
          "$ref": "core/primitives.schema.json#/definitions/code"
        },
        "_kind": {
          "description": "Extensions for kind",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "software": {
          "description": "Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.",
          "$ref": "#/definitions/TerminologyCapabilities_Software"
        },
        "implementation": {
          "description": "Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.",
          "$ref": "#/definitions/TerminologyCapabilities_Implementation"
        },
        "lockedDate": {
          "description": "Whether the server supports lockedDate.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_lockedDate": {
          "description": "Extensions for lockedDate",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "codeSystem": {
          "description": "Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.",
          "items": {
            "$ref": "#/definitions/TerminologyCapabilities_CodeSystem"
          },
          "type": "array"
        },
        "expansion": {
          "description": "Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.",
          "$ref": "#/definitions/TerminologyCapabilities_Expansion"
        },
        "codeSearch": {
          "description": "The degree to which the server supports the code search parameter on ValueSet, if it is supported.",
          "enum": [
            "explicit",
            "all"
          ]
        },
        "_codeSearch": {
          "description": "Extensions for codeSearch",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "validateCode": {
          "description": "Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.",
          "$ref": "#/definitions/TerminologyCapabilities_ValidateCode"
        },
        "translation": {
          "description": "Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.",
          "$ref": "#/definitions/TerminologyCapabilities_Translation"
        },
        "closure": {
          "description": "Whether the $closure operation is supported.",
          "$ref": "#/definitions/TerminologyCapabilities_Closure"
        }
      },
      "unevaluatedProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "TerminologyCapabilities_Software": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "Name the software is known by.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "version": {
          "description": "The version identifier for the software covered by this statement.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_version": {
          "description": "Extensions for version",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TerminologyCapabilities_Implementation": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "description": {
          "description": "Information about the specific installation that this terminology capability statement relates to.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "url": {
          "description": "An absolute base URL for the implementation.",
          "$ref": "core/primitives.schema.json#/definitions/url"
        },
        "_url": {
          "description": "Extensions for url",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TerminologyCapabilities_CodeSystem": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "uri": {
          "description": "URI for the Code System.",
          "$ref": "core/primitives.schema.json#/definitions/canonical"
        },
        "version": {
          "description": "For the code system, a list of versions that are supported by the server.",
          "items": {
            "$ref": "#/definitions/TerminologyCapabilities_Version"
          },
          "type": "array"
        },
        "subsumption": {
          "description": "True if subsumption is supported for this version of the code system.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_subsumption": {
          "description": "Extensions for subsumption",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TerminologyCapabilities_Version": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "For version-less code systems, there should be a single version with no identifier.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "isDefault": {
          "description": "If this is the default version for this code system.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_isDefault": {
          "description": "Extensions for isDefault",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "compositional": {
          "description": "If the compositional grammar defined by the code system is supported.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_compositional": {
          "description": "Extensions for compositional",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "language": {
          "description": "Language Displays supported.",
          "items": {
            "$ref": "core/primitives.schema.json#/definitions/code"
          },
          "type": "array"
        },
        "_language": {
          "description": "Extensions for language",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Element"
          },
          "type": "array"
        },
        "filter": {
          "description": "Filter Properties supported.",
          "items": {
            "$ref": "#/definitions/TerminologyCapabilities_Filter"
          },
          "type": "array"
        },
        "property": {
          "description": "Properties supported for $lookup.",
          "items": {
            "$ref": "core/primitives.schema.json#/definitions/code"
          },
          "type": "array"
        },
        "_property": {
          "description": "Extensions for property",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Element"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "TerminologyCapabilities_Filter": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "Code of the property supported.",
          "$ref": "core/primitives.schema.json#/definitions/code"
        },
        "_code": {
          "description": "Extensions for code",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "op": {
          "description": "Operations supported for the property.",
          "items": {
            "$ref": "core/primitives.schema.json#/definitions/code"
          },
          "type": "array"
        },
        "_op": {
          "description": "Extensions for op",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Element"
          },
          "type": "array"
        }
      },
      "additionalProperties": false
    },
    "TerminologyCapabilities_Expansion": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "hierarchical": {
          "description": "Whether the server can return nested value sets.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_hierarchical": {
          "description": "Extensions for hierarchical",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "paging": {
          "description": "Whether the server supports paging on expansion.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_paging": {
          "description": "Extensions for paging",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "incomplete": {
          "description": "Allow request for incomplete expansions?",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_incomplete": {
          "description": "Extensions for incomplete",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "parameter": {
          "description": "Supported expansion parameter.",
          "items": {
            "$ref": "#/definitions/TerminologyCapabilities_Parameter"
          },
          "type": "array"
        },
        "textFilter": {
          "description": "Documentation about text searching works.",
          "$ref": "core/primitives.schema.json#/definitions/markdown"
        },
        "_textFilter": {
          "description": "Extensions for textFilter",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TerminologyCapabilities_Parameter": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "name": {
          "description": "Expansion Parameter name.",
          "$ref": "core/primitives.schema.json#/definitions/code"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "core/elements.schema.json#/definitions/Element"
        },
        "documentation": {
          "description": "Description of support for parameter.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "_documentation": {
          "description": "Extensions for documentation",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TerminologyCapabilities_ValidateCode": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "translations": {
          "description": "Whether translations are validated.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_translations": {
          "description": "Extensions for translations",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TerminologyCapabilities_Translation": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "needsMap": {
          "description": "Whether the client must identify the map.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_needsMap": {
          "description": "Extensions for needsMap",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    },
    "TerminologyCapabilities_Closure": {
      "description": "A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "$ref": "core/primitives.schema.json#/definitions/string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "core/elements.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "translation": {
          "description": "If cross-system closure is supported.",
          "$ref": "core/primitives.schema.json#/definitions/boolean"
        },
        "_translation": {
          "description": "Extensions for translation",
          "$ref": "core/elements.schema.json#/definitions/Element"
        }
      },
      "additionalProperties": false
    }
  }
}
